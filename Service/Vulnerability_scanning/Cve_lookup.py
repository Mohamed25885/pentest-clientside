from Service import BaseService
from PyQt5.QtWidgets import QPushButton, QLineEdit,QTextEdit
from PyQt5.QtCore import QObject
from requests import Response


class CveLookupService(BaseService):
    def __init__(self, main: QObject, button: QPushButton, output: QTextEdit) -> None:
        super().__init__(main)
        self.button = button
        self.output = output

    def before_request(self):
        self.button.setDisabled(True)

    def onError(self):
        self.button.setDisabled(False)

    def onResponse(self, **kwargs):
        res: Response = kwargs['response']
        self.button.setDisabled(False)
        data = res.json()['data']
        formatted_data = ""

        if isinstance(data, list):
            if data:
                for entry in data:
                    formatted_data += f"-ID: {entry['id']}\n"
                    for cvss_entry in entry['cvss']:
                        cvss_data = cvss_entry['cvss']
                        formatted_data += f"  CVSS Version: {cvss_data['version']}\n"
                        formatted_data += f"  Vector String: {cvss_data['vectorString']}\n"
                        formatted_data += f"  Attack Vector: {cvss_data.get('attackVector', 'N/A')}\n"
                        formatted_data += f"  Attack Complexity: {cvss_data.get('attackComplexity', 'N/A')}\n"
                        formatted_data += f"  Privileges Required: {cvss_data.get('privilegesRequired', 'N/A')}\n"
                        formatted_data += f"  User Interaction: {cvss_data.get('userInteraction', 'N/A')}\n"
                        formatted_data += f"  Scope: {cvss_data.get('scope', 'N/A')}\n"
                        formatted_data += f"  Confidentiality Impact: {cvss_data.get('confidentialityImpact', 'N/A')}\n"
                        formatted_data += f"  Integrity Impact: {cvss_data.get('integrityImpact', 'N/A')}\n"
                        formatted_data += f"  Availability Impact: {cvss_data.get('availabilityImpact', 'N/A')}\n"
                        formatted_data += f"  Base Score: {cvss_data.get('baseScore', 'N/A')}\n"
                        formatted_data += f"  Base Severity: {cvss_data.get('baseSeverity', 'N/A')}\n"
                        formatted_data += f"  Impact Score: {cvss_entry['impact_score']}\n\n"
                    formatted_data += "\n"
            else:
                formatted_data = "Empty data."
        else:
            formatted_data = "Invalid data format."

        self.output.setText(formatted_data)



    def Cve_lookup(self, cpe: str):
        if self.validator.validate_cpe(cpe).validate():
            self.request("get", "/vulnerabilities/cve-lookup",
                         params={"cpe": cpe})
