from Service import BaseService
from PyQt5.QtWidgets import QPushButton, QLineEdit, QTextEdit
from PyQt5.QtCore import QObject
from requests import Response
from urllib.parse import urlparse
import json
from Options.web_vulnerability import ExtraTypeEnum
from typing import List

class ExtraService(BaseService):
    def __init__(self, main: QObject, button: QPushButton, output: QTextEdit, type: ExtraTypeEnum) -> None:
        super().__init__(main)
        self.button = button
        self.output = output
        self.type = type

    def before_request(self):
        self.button.setDisabled(True)

    def onError(self):
        self.button.setDisabled(False)

    def onResponse(self, **kwargs):
        res: Response = kwargs['response']
        self.button.setDisabled(False)
        data = res.json()['data']
        formatted_data = ""
        if isinstance(data, dict):
            formatted_data = ""
            if isinstance(data, dict):
                if len(data)==0:
                    formatted_data="No result"
                    print("here")
                for key, value in data.items():
                    if isinstance(value, list):
                        formatted_data += f'"{key}":\n'
                        for item in value:
                            formatted_data += f"  - {json.dumps(item, indent=2)}\n"
                        formatted_data += "\n"
                    elif isinstance(value, dict):
                        formatted_data += f'"{key}":\n{json.dumps(value, indent=4)}\n\n'
                    else:
                        formatted_data += f'"{key}": {value}\n\n'
        elif isinstance(data, List):
            formatted_data = "\n".join(map(lambda i: "==> "+str(i), data))
        else:
                formatted_data = str(data)
        
        if len(data)==0:
                formatted_data="No result"
        self.output.append(f'{self.type.value} vulnerability[')
        self.output.append(formatted_data)
        self.output.append("]")
        separator_line = "=" * 120  
        self.output.append(separator_line)

    def request_extra(self, url: str):

        if self.validator.url(url).validate():
            #print("ok")
            print(self.type.value)
            if(self.type.value=="host-header-attack" or self.type.value=="info-leak"):
                url2="/web-vulnerabilities/"+self.type.value
                jsondata={"url":url}
                print("mo")
                self.request("post",url2 ,
                         json=jsondata)
            else:
                self.request("get", "/web-vulnerabilities/"+self.type.value,
                            params={"url": url})
