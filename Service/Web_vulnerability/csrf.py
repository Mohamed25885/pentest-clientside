from Service import BaseService
from PyQt5.QtWidgets import QPushButton, QLineEdit, QTextEdit
from PyQt5.QtCore import QObject
from requests import Response
from urllib.parse import urlparse
import json


class CsrfService(BaseService):
    def __init__(self, main: QObject, button: QPushButton, output: QTextEdit) -> None:
        super().__init__(main)
        self.button = button
        self.output = output

    def before_request(self):
        self.button.setDisabled(True)

    def onError(self):
        self.button.setDisabled(False)

    def onResponse(self, **kwargs):
        res: Response = kwargs['response']
        self.button.setDisabled(False)
        data = res.json()['data']

        if isinstance(data, dict) and 'messages' in data:
            formatted_data = json.dumps(data, indent=4)
            messages = data['messages']
            formatted_data = "\n".join(
                [f"\"{key}\":  {value}" for key, value in messages.items()])
            self.output.setText(formatted_data)
        else:
            self.output.setText(str(data))
        # self.output.setText(data)a)

    def csrf(self, target: str, type: str, parames: str, encrypt: str, author: str):

        if self.validator.domain(urlparse(target).netloc).validate():
            parm_dict = {}
            if not (parames == None or parames == '') and parames:
                for parm in parames.strip().split('\n'):
                    key, value = parm.split('=')
                    parm_dict[key.strip()] = value.strip()

            if encrypt == "FormUrlEncoded":
                encrypted = "application/x-www-form-urlencoded"

            elif encrypt == "FormData":
                encrypted = "multipart/form-data"

            else:
                encrypted = "text/plain"

            self.request("post", "/web-vulnerabilities/csrf-poc-gen",
                         json={"url": target, "method": type, "params": parm_dict, "encrypt": encrypted, "author": author})
