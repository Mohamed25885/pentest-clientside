from PyQt5.QtCore import QThread, pyqtSignal
from Service import BaseService
from PyQt5.QtWidgets import QPushButton, QTextEdit
from requests import Response
from pyqtspinner import WaitingSpinner
from PyQt5.QtCore import QRunnable, QThread, QMetaObject, Q_ARG, Qt, QProcess
from PyQt5.QtCore import pyqtSlot, QThreadPool, QObject
import requests
import json

class ClickJackingService(BaseService):
    def __init__(self, main, button: QPushButton, output: QTextEdit):
        super().__init__(main)
        self.button = button
        self.output = output

    def before_request(self):
        self.button.setDisabled(True)

    def onResponse(self, **kwargs):
        res: Response = kwargs['response']
        self.button.setDisabled(False)
        data = res.json()['data']
        if isinstance(data, list):
                formatted_data = '\n'.join(data)
        else:
                formatted_data = json.dumps(data, indent=4)  # Format JSON with indentation for better readability
            
        # Check if the formatted data contains the string "jwt"
        if 'jwt' in data and data['jwt']:
                jwt_value = data['jwt']
                self.output.setText(jwt_value)
        else:
                self.output.setText("No result")

    def clickJacking(self, Url,create_script):

        url = "/web-vulnerabilities/click-jacking"
        json_data = {"url":Url,"create_script":create_script}
        response = self.request("post", url, json=json_data)
        print(response)
        self.before_request()
        self.spinner.start()



