from PyQt5.QtCore import QThread, pyqtSignal
from Service import BaseService
from PyQt5.QtWidgets import QPushButton, QTextEdit
from requests import Response
from pyqtspinner import WaitingSpinner
from PyQt5.QtCore import QRunnable, QThread, QMetaObject, Q_ARG, Qt, QProcess
from PyQt5.QtCore import pyqtSlot, QThreadPool, QObject
import requests
import json


class ClickJackingService(BaseService):
    def __init__(self, main, button: QPushButton, output: QTextEdit):
        super().__init__(main)
        self.button = button
        self.output = output

    def before_request(self):
        self.button.setDisabled(True)

    def onResponse(self, **kwargs):
        res: Response = kwargs['response']
        self.button.setDisabled(False)
        data = res.json()['data']
        formatted_data = ""

        if isinstance(data, dict):
            formatted_data = ""
            if isinstance(data, dict):
                for key, value in data.items():
                    if isinstance(value, list):
                        formatted_data += f'"{key}":\n'
                        for item in value:
                            formatted_data += f"  - {json.dumps(item, indent=2)}\n"
                        formatted_data += "\n"
                    elif isinstance(value, dict):
                        formatted_data += f'"{key}":\n{json.dumps(value, indent=4)}\n\n'
                    else:
                        formatted_data += f'"{key}": {value}\n\n'
        else:
            if data=="":
                formatted_data="No result"
            else:formatted_data = str(data)

        if len(data)==0:
                formatted_data="No result"
        self.output.append("-Click jacking vulnerability [")
        self.output.append(formatted_data)
        self.output.append("]")
        separator_line = "=" * 120  
        self.output.append(separator_line)

    def clickJacking(self, Url, create_script):

        url = "/web-vulnerabilities/click-jacking"
        json_data = {"url": Url, "create_script": create_script}
        response = self.request("post", url, json=json_data)
        #print(response)
        self.before_request()
        self.spinner.start()
