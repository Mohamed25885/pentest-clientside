from PyQt5.QtWidgets import QMainWindow, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QTextEdit, QComboBox
from PyQt5.QtCore import Qt, QObject
from Widgets.SearchButton import *
from Widgets.ClearButton import *
from Widgets.ResponseBox import *
from Widgets.TargetInput import *
from Widgets.SendButton import *
from Widgets.InputBox import *
from Widgets.CheckBox import *
from Widgets.StopButton import *
from Helpers.validator import Validator
from Service import LfiService
import json
import requests
from PyQt5.QtCore import QRunnable, QThread, QMetaObject, Q_ARG, Qt, QProcess
from PyQt5.QtCore import pyqtSlot, QThreadPool, QObject
from typing import Optional

# from Service.Web_vulnerability import lfi
class LfiTab(QWidget):
    def __init__(self):
        super().__init__()
        self.setup_lfi_tab()

    def setup_lfi_tab(self: QObject):
        def clearInputs():
            self.res_box.clear_text()
            self.target_input.clear()
            self.cookie_input.clear()
            self.windows_box.setChecked(False)
            self.verbose_box.setChecked(False)

        def toggle_buttons(force_stop: Optional[bool] = None):

            self.search_button.setVisible(not self.search_button.isVisible())
            self.stop_button.setVisible(not self.stop_button.isVisible())

            if force_stop is not None:
                self.search_button.setVisible(not force_stop)
                self.stop_button.setVisible(force_stop)
                
        self.stop_button = StopButton(title="Stop")
        self.button_layout = QHBoxLayout()
        self.search_button = SendButton()
        self.clear_button = ClearButton()
        self.button_layout.addWidget(self.search_button)
        self.button_layout.addWidget(self.stop_button)
        self.button_layout.addWidget(self.clear_button)
        self.res_box = ResponseBox()
        self.clear_button.clicked.connect(clearInputs)

        api = LfiService(self, button=self.search_button,
                         output=self.res_box, toggle_fun=toggle_buttons)
        
        self.layout = QVBoxLayout()
        # dial = Dialog("get", "/enums/dns/lfi")
        self.input_layout = QVBoxLayout()
        self.target_label = QLabel("URL:")
        self.target_input = TargetInput()
        self.target_input.setPlaceholderText("domain name")
        self.input_layout.addWidget(self.target_label)
        self.input_layout.addWidget(self.target_input)
        self.windows_box = CheckBox("Windows")
        self.input_layout.addWidget(self.windows_box)
        self.verbose_box = CheckBox("Verbose")
        self.input_layout.addWidget(self.verbose_box)
        self.cookie_label = QLabel("Cookie:")
        self.cookie_input = InputBox()
        self.cookie_input.setPlaceholderText("cookie")
        self.input_layout.addWidget(self.cookie_label)
        self.input_layout.addWidget(self.cookie_input)
        # self.search_button.clicked.connect(self.run_scanner)
        self.search_button.clicked.connect(
            lambda: api.start(url=self.target_input.text(), is_windows=self.windows_box.isChecked(),
                              is_verbose=self.verbose_box.isChecked(), cookies=self.cookie_input.toPlainText()))
        
        self.stop_button.clicked.connect(lambda: api.kill())
        
        self.response_label = QLabel("Response:")
        self.layout.addLayout(self.input_layout)
        self.layout.addWidget(self.response_label)
        self.layout.addWidget(self.res_box)
        self.layout.addLayout(self.button_layout)
        self.setLayout(self.layout)
        
        self.stop_button.hide()
        # options_dropdown.setFixedWidth(int((input_layout.sizeHint().width())*0.8))
